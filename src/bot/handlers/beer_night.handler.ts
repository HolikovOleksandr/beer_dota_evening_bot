import { Context } from "grammy";
import fs from "fs";
import path from "path";
import "dotenv/config";
import beerNightKeyboard from "../keyboards/beer_night.keyboard";
import memesStore from "../../shared/memes";

const STATE_FILE = path.resolve(
  process.env.BEER_NIGHT_STATE_FILE || "./beerNightState.json"
);

interface BeerNightState {
  users: Record<string, { username?: string; choice: string }>;
  message_id?: number;
}

// ===================== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –°–¢–ê–ù–£ =====================
let beerNightState: BeerNightState = { users: {} };
try {
  const content = fs.readFileSync(STATE_FILE, "utf-8").trim();
  beerNightState = content ? JSON.parse(content) : { users: {} };
} catch {
  beerNightState = { users: {} };
}

// ===================== –•–ï–õ–ü–ï–† =====================
function formatBeerNightMessage(state: BeerNightState) {
  let message = "<b>üí™ –°—Ç–∞–Ω –ø–∏–≤–æ–¥–æ—Ç–Ω–æ–≥–æ –≤–µ—á–æ—Ä–∞:</b>\n\n";

  for (const [id, data] of Object.entries(state.users || {})) {
    const name = data.username ? `@${data.username}` : id;
    message += `‚Ä¢ ${name}: ${data.choice}\n`;
  }

  return message;
}

// ===================== –§–£–ù–ö–¶–Ü–Ø –í–Ü–î–ü–†–ê–í–ö–ò / –û–ù–û–í–õ–ï–ù–ù–Ø –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø =====================
async function sendOrReplaceMessage(
  ctx: Context,
  text: string,
  photoUrl?: string
) {
  // –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ —î
  if (beerNightState.message_id) {
    try {
      await ctx.api.deleteMessage(ctx.chat?.id!, beerNightState.message_id);
    } catch {
      // —è–∫—â–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ –≤–¥–∞–ª–æ—Å—è ‚Äî –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
    }
  }

  let sent;
  if (photoUrl) {
    // –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ –ø–æ URL + —Ç–µ–∫—Å—Ç + –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    sent = await ctx.replyWithPhoto(photoUrl, {
      caption: text,
      parse_mode: "HTML",
      reply_markup: beerNightKeyboard,
    });
  } else {
    // –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç + –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    sent = await ctx.reply(text, {
      parse_mode: "HTML",
      reply_markup: beerNightKeyboard,
    });
  }

  beerNightState.message_id = sent.message_id;
  fs.writeFileSync(STATE_FILE, JSON.stringify(beerNightState, null, 2));
}

// ===================== –•–ï–ù–î–õ–ï–† –°–¢–ê–†–¢–£ =====================
export async function beerNightHandler(ctx: Context) {
  const mainQuestionMessage = "üçª –ü–∏–≤–æ–¥–æ—Ç–Ω–∏–π –≤–µ—á—ñ—Ä —á–∏ –ø—ñ—à–æ–≤ —è –Ω–∞—Ö—É–π?";
  await sendOrReplaceMessage(ctx, mainQuestionMessage, getRandomMeme());
}

// ===================== –•–ï–ù–î–õ–ï–† –í–ò–ë–û–†–£ =====================
export async function beerNightChoiceHandler(ctx: Context) {
  const userId = String(ctx.from?.id);
  const username = ctx.from?.username;
  const choiceText = ctx.message?.text;
  if (!choiceText) return;

  if (!beerNightState.users) beerNightState.users = {};
  beerNightState.users[userId] = { username, choice: choiceText };
  fs.writeFileSync(STATE_FILE, JSON.stringify(beerNightState, null, 2));

  const message = formatBeerNightMessage(beerNightState);
  await sendOrReplaceMessage(ctx, message);
}

// ===================== –•–ï–ù–î–õ–ï–† –°–¢–ê–¢–£–°–£ =====================
export async function statusHandler(ctx: Context) {
  if (!beerNightState.users || Object.keys(beerNightState.users).length === 0) {
    const anyChoisesMessage = "ü§ï –ü–æ–∫–∏ —â–æ –Ω—ñ—Ö—Ç–æ –Ω–µ –æ–±—Ä–∞–≤ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.";
    await sendOrReplaceMessage(ctx, anyChoisesMessage);
    return;
  }

  const message = formatBeerNightMessage(beerNightState);
  await sendOrReplaceMessage(ctx, message);
}

function getRandomMeme(): string {
  const index = Math.floor(Math.random() * memesStore.length);
  return memesStore[index];
}

// ===================== –ì–õ–û–ë–ê–õ–¨–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö –ü–û–ú–ò–õ–û–ö =====================
export function setupErrorHandler(bot: any) {
  bot.catch = (err: any) => console.error("‚ùå BotError", err);
}
